{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\MVST\\\\GithubRWSF\\\\gitrwsf\\\\src\\\\components\\\\RepoResPage.tsx\",\n  _s = $RefreshSig$();\nimport SearchBar from \"./SearchBWF/SearchBar\";\nimport { useEffect } from 'react';\nimport FilterT from \"./SearchBWF/FilterT\";\nimport Filterl from \"./SearchBWF/FilterL\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RepoResPage = () => {\n  _s();\n  useEffect(() => {\n    fetch();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-end justify-end ml-auto\",\n    style: {\n      width: '72vw'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterT, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Filterl, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border-y border-gray-300 mx-2 mb-2 w-full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(RepoResPage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = RepoResPage;\nexport default RepoResPage;\n\n/* const [code, setCode] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const response = await octokit.request('GET /repos/{owner}/', {\r\n          owner: 'MHZ0',\r\n        });\r\n        setCode(response.data); // Assuming you want to store the data in the 'code' state\r\n        console.log(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n\r\n    fetchData(); // Call the fetchData function within the useEffect\r\n  }, []); // The empty dependency array means this effect runs once when the component mounts */\nvar _c;\n$RefreshReg$(_c, \"RepoResPage\");","map":{"version":3,"names":["SearchBar","useEffect","FilterT","Filterl","jsxDEV","_jsxDEV","RepoResPage","_s","fetch","className","style","width","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Documents/MVST/GithubRWSF/gitrwsf/src/components/RepoResPage.tsx"],"sourcesContent":["import SearchBar from \"./SearchBWF/SearchBar\";\r\nimport { useState, useEffect } from 'react';\r\nimport FilterT from \"./SearchBWF/FilterT\";\r\nimport Filterl from \"./SearchBWF/FilterL\";\r\nimport octokit from \"../Githubclient/GithubC\";\r\n\r\n\r\n\r\nconst RepoResPage = () => {\r\n  \r\n  useEffect(() => {\r\n    fetch()\r\n\r\n  },\r\n  \r\n  []);\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"flex flex-col items-end justify-end ml-auto\" style={{ width: '72vw' }}>\r\n      <div className=\"flex items-center justify-center\">\r\n\r\n        <SearchBar />\r\n        <FilterT />\r\n        <Filterl />\r\n\r\n      </div>\r\n\r\n      <div className=\"border-y border-gray-300 mx-2 mb-2 w-full\">\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepoResPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* const [code, setCode] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const response = await octokit.request('GET /repos/{owner}/', {\r\n          owner: 'MHZ0',\r\n        });\r\n        setCode(response.data); // Assuming you want to store the data in the 'code' state\r\n        console.log(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n\r\n    fetchData(); // Call the fetchData function within the useEffect\r\n  }, []); // The empty dependency array means this effect runs once when the component mounts */"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,uBAAuB;AAC7C,SAAmBC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,OAAO,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAK1C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAExBN,SAAS,CAAC,MAAM;IACdO,KAAK,CAAC,CAAC;EAET,CAAC,EAED,EAAE,CAAC;EAGH,oBAEEH,OAAA;IAAKI,SAAS,EAAC,6CAA6C;IAACC,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACpFP,OAAA;MAAKI,SAAS,EAAC,kCAAkC;MAAAG,QAAA,gBAE/CP,OAAA,CAACL,SAAS;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACbX,OAAA,CAACH,OAAO;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACXX,OAAA,CAACF,OAAO;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAER,CAAC,eAENX,OAAA;MAAKI,SAAS,EAAC;IAA2C;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAErD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACT,EAAA,CA1BID,WAAW;AAAAW,EAAA,GAAXX,WAAW;AA4BjB,eAAeA,WAAW;;AAU1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}